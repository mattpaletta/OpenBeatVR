languages: cpp

os: linux
dist: bionic
cache: ccache

matrix:
  include:
# These tests run every time
    - os: windows
      compiler: msvc
      allow_failures: true
      env:
      - BUILD=Debug
      - env_cmake_cxx_compiler=msvc
      - env_cmake_c_compiler=msvc
      - enable_debug=ON
      - enable_debug_vr=ON
    - os: linux
      compiler: gcc
      env:
      - BUILD=Debug
      - env_cmake_cxx_compiler=g++
      - env_cmake_c_compiler=gcc
      - enable_debug=ON
      - enable_debug_vr=ON
      addons:
        apt:
          update: true
          sources:
          - ubuntu-toolchain-r-test
          packages:
          - gcc
          - freeglut3
          - freeglut3-dev
          - mesa-utils
          - libglfw3
          - libglfw3-dev
    - os: linux
      compiler: clang++-10
      env:
      - BUILD=Debug
      - env_cmake_cxx_compiler=clang++-10
      - env_cmake_c_compiler=clang-10
      - enable_debug=ON
      - enable_debug_vr=ON
      addons:
        apt:
          update: true
          sources:
          - ubuntu-toolchain-r-test
          packages:
          - freeglut3
          - freeglut3-dev
          - mesa-utils
          - libglfw3
          - libglfw3-dev
# Test on OSX
    - os: osx
      osx_image: xcode11.4
      compiler: clang
      env:
      - BUILD=Debug
      - env_cmake_cxx_compiler=clang++
      - env_cmake_c_compiler=clang
      - enable_debug=ON
      - enable_debug_vr=ON
      addons:
        homebrew:
          packages:
            - glfw3
            - cmake
          update: true
env:
  # Build with standard settings, in relaase
  - BUILD=Release

addons:
  apt:
    update: true
    source:
      - ubuntu-toolchain-r-test
    packages:
      - freeglut3
      - freeglut3-dev
      - mesa-utils
      - libglfw3
      - libglfw3-dev


before_install:
  - if [[ $TRAVIS_OS_NAME == "linux" && ($CXX_FOR_BUILD == "clang++-10" || $CXX_FOR_BUILD == "clang++-9" || $CXX_FOR_BUILD == "clang++-8" || $CXX_FOR_BUILD == "clang++" || $CXX_FOR_BUILD == "clang") ]]; then
      wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add - && sudo add-apt-repository 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-10 main' && sudo apt-get -y update && sudo apt-get install -y ${env_cmake_c_compiler} libc++-dev;
    fi;
  - if [[ $TRAVIS_OS_NAME == "linux" ]]; then
      export CMAKE_MAJOR_VERSION=3.17;
      export CMAKE_MINOR_VERSION=2;
      wget -q https://cmake.org/files/v${CMAKE_MAJOR_VERSION}/cmake-${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}-Linux-x86_64.sh && mkdir /opt/cmake && sh ./cmake-${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}-Linux-x86_64.sh --prefix=/opt/cmake --skip-license && sudo ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake && rm ./cmake-${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}-Linux-x86_64.sh && export PATH=/usr/local/bin:$PATH;
    fi;
  - if [[ $TRAVIS_OS_NAME == "windows" ]]; then
      choco upgrade cmake -y --version=3.17.2
    fi;

script:
  - mkdir build
  - cd build
  - cmake -DCMAKE_CXX_COMPILER=${env_cmake_cxx_compiler} -DCMAKE_C_COMPILER=${env_cmake_c_compiler} -DCMAKE_BUILD_TYPE=${BUILD} -DENGINE_DEBUG=${enable_debug} -DENGINE_DEBUG_VR=${enable_debug_vr} -DENGINE_EXTRA_COMPILER_CHECKS=ON -DENGINE_WERROR=ON ..
  - cmake --build . -j 4
 #- ctest .
